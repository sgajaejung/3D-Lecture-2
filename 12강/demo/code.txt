

@@item DirectX 초기화. ---------------------------------------

@@item 1. DirectX 장치 객체 선언
#pragma comment( lib, "d3d9.lib" )

LPDIRECT3DDEVICE9	g_pDevice = NULL;


@@item 2. DirectX 장치 객체 제거.
	if (g_pDevice)
		g_pDevice->Release();


@@item 3. InitDirectX 함수 선언.
bool InitDirectX(HWND hWnd);


@@item 4. InitDirectX 함수 호출
	if (!InitDirectX(hWnd))
	{
		return 0;
	}


@@item 5. InitDirectX 함수 정의 
bool InitDirectX(HWND hWnd)
{


	return true;
}


@@item 6. Direct3D9 객체 생성.
	LPDIRECT3D9 d3d9;
	d3d9 = Direct3DCreate9( D3D_SDK_VERSION );

	// 하드웨어 정보를 가지고 와서 자신의 정점 프로세스 타입을 정하자
	D3DCAPS9 caps;

	//Direct3D9 객체 통해 비디오 카드의 하드웨어 정보를 가지고 온다.
	d3d9->GetDeviceCaps(
		D3DADAPTER_DEFAULT,			//주 디스플레이 그래픽 카드 그냥 D3DADAPTER_DEFAULT
		D3DDEVTYPE_HAL,				//디바이스타입 설정 그냥 D3DDEVTYPE_HAL
		&caps						//디바이스 정보를 받아올 D3DCAPS9 포인터
		);

	//정점계산 처리방식을 지정할 플레그 값
	int vertexProcessing = 0;

	//정점 위치와 광원 계산시 하드웨어 사용이 가능한가
	if (caps.DevCaps & D3DDEVCAPS_HWTRANSFORMANDLIGHT)
		vertexProcessing = D3DCREATE_HARDWARE_VERTEXPROCESSING;
	else
		vertexProcessing = D3DCREATE_SOFTWARE_VERTEXPROCESSING;



@@item 7. DirectX9 디바이스 생성.
	//3. D3DPRESENT_PARAMETERS 구조체 정보를 생성
	//내가 이러한 Device 를 만들겟다라는 정보

	D3DPRESENT_PARAMETERS d3dpp;		
	d3dpp.AutoDepthStencilFormat = D3DFMT_D24S8;				//뎁스 버퍼와 스테실 버퍼 크기 뎁스 24bit 스텐실 버퍼 8 비트
	d3dpp.BackBufferCount = 1;						//백버퍼 갯수 그냥 1개
	d3dpp.BackBufferFormat = D3DFMT_A8R8G8B8;			//백버퍼 색상 포맷 알파8비트,레드8비트,그린8비트,블루8비트
	d3dpp.BackBufferHeight = WINSIZE_Y;				//백버퍼 픽셀 크기
	d3dpp.BackBufferWidth = WINSIZE_X;				//백버퍼 픽셀 크기
	d3dpp.EnableAutoDepthStencil = true;						//자동 깊이버퍼 사용 여부 ( 그냥 true )
	d3dpp.Flags = 0;						//추기 플래그 ( 일단 0 )
	d3dpp.FullScreen_RefreshRateInHz	= D3DPRESENT_RATE_DEFAULT;	//화면 주사율 ( 그냥 D3DPRESENT_RATE_DEFAULT 모니터 주사율과 동일시 )
	d3dpp.hDeviceWindow = hWnd;					//Device 가 출력될 윈도우 핸들
	d3dpp.MultiSampleQuality = 0;						//멀티 샘플링 질
	d3dpp.MultiSampleType = D3DMULTISAMPLE_NONE;		//멀티 샘플링 타입 
	d3dpp.PresentationInterval = D3DPRESENT_INTERVAL_ONE;	//화면 전송 간격 ( 그냥 D3DPRESENT_INTERVAL_ONE 모니터 주사율과 동일시 )
	d3dpp.SwapEffect = D3DSWAPEFFECT_DISCARD;	//화면 스왑 체인 방식
	d3dpp.Windowed = true;						//윈도우 모드냐? ( 이게 false 면 풀스크린 된다! )

	//4. Device 생성
	if (FAILED(d3d9->CreateDevice(
		D3DADAPTER_DEFAULT,					//주 디스플레이 그래픽 카드 그냥 D3DADAPTER_DEFAULT
		D3DDEVTYPE_HAL,						//디바이스타입 설정 그냥 D3DDEVTYPE_HAL
		hWnd,								//디바이스를 사용할 윈도우 핸들
		vertexProcessing,					//정점 처리 방식에 대한 플레그
		&d3dpp,								//앞에서 정의한 D3DPRESENT_PARAMETERS 구조체 포인터
		&g_pDevice							//얻어올 디바이스 더블포인터
		)))
	{
		//디바이스 생성 실패
		d3d9->Release(); // Deivce 를 만들기 위해 생성된 Direct3D9 객체를 해제
		d3d9 = NULL;

		MessageBoxA( hWnd, "CreateDevice() - FAILED", "FAILED", MB_OK );
		return false;
	}


	//디바이스 생성 성공
	d3d9->Release(); // Deivce 를 만들었으니 넌 더이상 필요없다 ( 사라져라! )
	d3d9 = NULL;



@@item 렌더링. ---------------------------------------

@@item 1. 렌더 함수 선언.
void Render();


@@item 2. 렌더 함수 호출
Render();


@@item 3. 렌더 함수 구현.
//랜더
void Render()
{
	//화면 청소
	if (SUCCEEDED(g_pDevice->Clear( 
		0,			//청소할 영역의 D3DRECT 배열 갯수		( 전체 클리어 0 )
		NULL,		//청소할 영역의 D3DRECT 배열 포인터		( 전체 클리어 NULL )
		D3DCLEAR_TARGET | D3DCLEAR_ZBUFFER | D3DCLEAR_STENCIL,	//청소될 버퍼 플레그 ( D3DCLEAR_TARGET 컬러버퍼, D3DCLEAR_ZBUFFER 깊이버퍼, D3DCLEAR_STENCIL 스텐실버퍼
		D3DCOLOR_XRGB(0, 0, 0),			//컬러버퍼를 청소하고 채워질 색상( 0xAARRGGBB )
		1.0f,				//깊이버퍼를 청소할값 ( 0 ~ 1 0 이 카메라에서 제일가까운 1 이 카메라에서 제일 먼 )
		0					//스텐실 버퍼를 채울값
		)))
	{
		//화면 청소가 성공적으로 이루어 졌다면... 랜더링 시작
		g_pDevice->BeginScene();


		//랜더링 끝
		g_pDevice->EndScene();
		//랜더링이 끝났으면 랜더링된 내용 화면으로 전송
		g_pDevice->Present( NULL, NULL, NULL, NULL );
	}
}





@@item 버텍스 버퍼 초기화. ---------------------------------------

@@item 1. 버텍스 버퍼 객체 선언.
LPDIRECT3DVERTEXBUFFER9 g_pVB = NULL; // 버텍스 버퍼


@@item 2. 버텍스 구조체 선언.
// 버텍스 구조체
struct Vertex
{
	FLOAT x, y, z, rhw; // The transformed position for the vertex
	DWORD color;        // The vertex color
	static const DWORD FVF;
};
//버텍스 구조체 포맷.
const DWORD Vertex::FVF = D3DFVF_XYZRHW | D3DFVF_DIFFUSE;


@@item 3. 버텍스 버퍼 객체 제거.
	if (g_pVB)
		g_pVB->Release();



@@item 4. 버텍스 버퍼 초기화 함수 선언.
bool InitVertexBuffer();


@@item 5. 버텍스 버퍼 초기화 함수 호출
InitVertexBuffer();


@@item 6. 버텍스 버퍼 초기화 함수 정의
bool InitVertexBuffer()
{
	// 버텍스 초기화.
	const Vertex Vertices[] =
	{
		{ 450.0f,  50.0f, 0.5f, 1.0f, 0xffff0000, }, // x, y, z, rhw, color
		{ 850.0f, 650.0f, 0.5f, 1.0f, 0xff00ff00, },
		{  50.0f, 650.0f, 0.5f, 1.0f, 0xff00ffff, },
	};

	// 버텍스 버퍼 생성.
	if (FAILED(g_pDevice->CreateVertexBuffer( 3 * sizeof(Vertex),
		0, Vertex::FVF,
		D3DPOOL_MANAGED, &g_pVB, NULL)))
	{
		return false;
	}

	// 버텍스 버퍼 초기화.
	void *vertices;
	if (FAILED(g_pVB->Lock( 0, sizeof( Vertices ), ( void** )&vertices, 0)))
		return false;
	memcpy( vertices, Vertices, sizeof( Vertices ) );
	g_pVB->Unlock();

	return true;
}


@@item 7. 버텍스 버퍼 출력.
		g_pDevice->SetStreamSource( 0, g_pVB, 0, sizeof( Vertex ) );
		g_pDevice->SetFVF( Vertex::FVF );
		g_pDevice->DrawPrimitive( D3DPT_TRIANGLELIST, 0, 1 );


