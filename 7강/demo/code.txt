

@@item Max Script ---------------------------------------


@@item 1. 3DMax 상의 모든 오브젝트를 모아서 저장한다.
fn CollectObject = 
(
	g_varSetMeshes = #()

	for i=1 to objects.count do
	(
		append g_varSetMeshes objects[i]
	)
)


@@item 2. CollectObject 함수를 호출한다.
	CollectObject()



@@item 3. 버텍스 정보를 모아서 리턴하는 함수.
fn CollectVertex obj = 
(
	varSetVertex= #()
	for i=1 to obj.numverts do
	(
		v = getvert obj i
		append varSetVertex v
	)
	varSetVertex
)


@@item 4. 오브젝트의 버텍스 정보를 파일에 저장한다.
fn WriteVertex obj = 
(
	varSetVertice = CollectVertex obj

	format "VERTEX = %\n" varSetVertice.count to:Outfile
	for i=1 to varSetVertice.count do
	(
		vtx = (ConvertToD3D_POS varSetVertice[ i]) 
		format "% % %\n" vtx.x vtx.y vtx.z to:Outfile
	)
)


@@item 5. 3DMax 좌표를 Direct3D 좌표계로 변환하는 함수.
fn ConvertToD3D_POS max_pos =
(
	local d3d_pos = [0,0,0]
	d3d_pos.x = max_pos.x
	d3d_pos.y = max_pos.z
	d3d_pos.z = max_pos.y
	
	d3d_pos
)


@@item 6. 인덱스 정보를 모아서 리턴하는 함수
fn CollectIndex obj = 
(
	varSetIndex = #()
	for i=1 to obj.numfaces do
	(
		v = copy (getface obj i)
		append varSetIndex v
	)
	varSetIndex
)


@@item 7. 오브젝트의 인덱스 정보를 파일에 저장한다.
fn WriteIndex obj = 
(
	varSetIndex = CollectIndex obj

	format "INDEX = %\n" varSetIndex.count to:Outfile
	for i=1 to varSetIndex.count do
	(
		index = (ConvertToD3D_INDEX varSetIndex[ i])
		format "% % %\n" (index.x as integer) (index.y as integer) (index.z as integer) to:Outfile
	)
)


@@item 8. 3DMax 인덱스 버퍼 순서를 Direct3D 인덱스 버퍼 순서로 변환.
fn ConvertToD3D_INDEX max_index =
(
	local d3d_index = [0,0,0]
	d3d_index.x = max_index.x - 1
	d3d_index.y = max_index.z - 1
	d3d_index.z = max_index.y - 1

	d3d_index
)


@@item 9. WriteVertex, WriteIndex 함수를 호출한다.
			WriteVertex g_varSetMeshes[ i]
			WriteIndex g_varSetMeshes[ i]




@@item RenderModel --------------------------------------

@@item 1. 카메라 조정에 필요한 변수를 선언한다.
Vector3 g_cameraPos(0,1000,-1000);
Vector3 g_cameraLookat(0,0,0);


@@item 2. 카메라 행렬을 생성한다.
	Vector3 dir = g_cameraLookat - g_cameraPos;
	dir.Normalize();
	g_matView.SetView(g_cameraPos, dir, Vector3(0,1,0));


@@item 3. 투영행렬을 생성한다.
	g_matProjection.SetProjection( MATH_PI / 4.f, 1.0f, 1.0f, 100.0f );


@@item 4. 뷰포트 행렬을 생성한다.
	RECT cr;
	::GetClientRect(g_hWnd, &cr);
	const float width = (float)(cr.right-cr.left);
	const float height = (float)(cr.bottom - cr.top);
	g_matViewPort.SetViewport(width, height);




@@item 5. 모델파일을 읽는 함수를 선언한다.
bool ReadModelFile( const string &fileName, vector<Vector3> &vertices, vector<int> &indices );



@@item 6. 모델파일 읽기 함수 호출.
ReadModelFile("../../media/cube.dat", g_vertices, g_indices);


@@item 7. ReadModelFile 구현.
bool ReadModelFile( const string &fileName, vector<Vector3> &vertices, vector<int> &indices )
{
	using namespace std;
	ifstream fin(fileName.c_str());
	if (!fin.is_open())
		return false;

	string vtx, vtx_eq;
	int numVertices;
	fin >> vtx >> vtx_eq >> numVertices;

	if (numVertices <= 0)
		return  false;

	vertices.resize(numVertices);

	float num1, num2, num3;
	for (int i = 0; i < numVertices; i++)
	{
		fin >> num1 >> num2 >> num3;
		vertices[i] = Vector3(num1, num2, num3);
	}

	string idx, idx_eq;
	int numIndices;
	fin >> idx >> idx_eq >> numIndices;

	if (numIndices <= 0)
		return false;

	indices.resize(numIndices*3);

	int num4, num5, num6;
	for (int i = 0; i < numIndices*3; i+=3)
	{
		fin >> num4 >> num5 >> num6;
		indices[ i] = num4;
		indices[ i+1] = num5;
		indices[ i+2] = num6;	
	}

	return true;
}


@@item 8. 키보드 입력을 받아 카메라를 조정한다.
	case WM_KEYDOWN:
		switch (wParam)
		{
		case VK_ESCAPE:
			::DestroyWindow(hWnd);
			break;

		case VK_LEFT:
		case VK_RIGHT:
			{
				g_cameraPos.x += (wParam==VK_RIGHT)? 100.f : -100.f;
				Vector3 dir = g_cameraLookat - g_cameraPos;
				dir.Normalize();
				g_matView.SetView(g_cameraPos, dir, Vector3(0,1,0));
			}
			break;

		case VK_UP:
		case VK_DOWN:
			{
				g_cameraPos.z += (wParam==VK_UP)? 100.f : -100.f;
				Vector3 dir = g_cameraLookat - g_cameraPos;
				dir.Normalize();
				g_matView.SetView(g_cameraPos, dir, Vector3(0,1,0));
			}
			break;
		}
		break;

