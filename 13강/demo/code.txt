

@@item Cube 출력 --------------------------------------------


@@item 1. 버텍스 버퍼 인덱스 버퍼 선언.
LPDIRECT3DVERTEXBUFFER9 g_pVB = NULL; // 버텍스 버퍼
LPDIRECT3DINDEXBUFFER9 g_pIB = NULL; // 인덱스 버퍼


@@item 2. 버텍스 구조체 선언, 포맷 설정.
// 버텍스 구조체
struct Vertex
{
	Vertex() {}
	Vertex(float x0, float y0, float z0) : x(x0), y(y0), z(z0) {}
	float x, y, z;
	static const DWORD FVF;
};
//버텍스 구조체 포맷.
const DWORD Vertex::FVF  = D3DFVF_XYZ;


@@item 3. 버텍스 버퍼, 인덱스 버퍼 제거.
	if (g_pVB)
		g_pVB->Release();
	if (g_pIB)
		g_pIB->Release();


@@item 4. 버텍스 버퍼를 생성하고, 초기화 한다.
	// 버텍스 버퍼 생성.
	if (FAILED(g_pDevice->CreateVertexBuffer( 8 * sizeof(Vertex),
		D3DUSAGE_WRITEONLY, Vertex::FVF,
		D3DPOOL_MANAGED, &g_pVB, NULL)))
	{
		return false;
	}


	// 버텍스 버퍼 초기화.
	Vertex* vertices;
	if (FAILED(g_pVB->Lock( 0, sizeof(Vertex), (void**)&vertices, 0)))
		return false;

	vertices[ 0] = Vertex(-1, -1, -1);
	vertices[ 1] = Vertex(-1, 1, -1);
	vertices[ 2] = Vertex(1, 1, -1);
	vertices[ 3] = Vertex(1, -1, -1);
	vertices[ 4] = Vertex(-1, -1, 1);
	vertices[ 5] = Vertex(-1, 1, 1);
	vertices[ 6] = Vertex(1, 1, 1);
	vertices[ 7] = Vertex(1, -1, 1);
	g_pVB->Unlock();



@@item 5. 인덱스 버퍼를 생성하고, 초기화 한다.
	if (FAILED(g_pDevice->CreateIndexBuffer(36*sizeof(WORD), 
		D3DUSAGE_WRITEONLY,
		D3DFMT_INDEX16,
		D3DPOOL_MANAGED,
		&g_pIB, NULL)))
	{
		return false;
	}

	WORD *indices = NULL;
	g_pIB->Lock(0, 0, (void**)&indices, 0);

	int index = 0;
	// front
	indices[ index++] = 0; indices[ index++] = 1; indices[ index++] = 2;
	indices[ index++] = 0; indices[ index++] = 2; indices[ index++] = 3;

	// back
	indices[ index++] = 4; indices[ index++] = 6; indices[ index++] = 5;
	indices[ index++] = 4; indices[ index++] = 7; indices[ index++] = 6;

	// left
	indices[ index++] = 4; indices[ index++] = 5; indices[ index++] = 1;
	indices[ index++] = 4; indices[ index++] = 1; indices[ index++] = 0;

	// right
	indices[ index++] = 3; indices[ index++] = 2; indices[ index++] = 6;
	indices[ index++] = 3; indices[ index++] = 6; indices[ index++] = 7;

	// top
	indices[ index++] = 1; indices[ index++] = 5; indices[ index++] = 6;
	indices[ index++] = 1; indices[ index++] = 6; indices[ index++] = 2;

	// bottom
	indices[ index++] = 4; indices[ index++] = 0; indices[ index++] = 3;
	indices[ index++] = 4; indices[ index++] = 3; indices[ index++] = 7;
	g_pIB->Unlock();


@@item 6. 뷰 행렬을 설정한다.
	D3DXVECTOR3 position(0,0,-5);
	D3DXVECTOR3 target(0,0,0);
	D3DXVECTOR3 up(0,1,0);
	D3DXMATRIX V;
	D3DXMatrixLookAtLH(&V, &position, &target, &up);
	g_pDevice->SetTransform(D3DTS_VIEW, &V);


@@item 7. 투영 행렬을 설정한다.
	D3DXMATRIX proj;
	D3DXMatrixPerspectiveFovLH(&proj ,D3DX_PI * 0.5f, (float)WINSIZE_X / (float) WINSIZE_Y, 1.f, 1000.0f) ;
	g_pDevice->SetTransform(D3DTS_PROJECTION, &proj) ;


@@item 8. 렌더링 옵션을 설정한다.
	g_pDevice->SetRenderState(D3DRS_CULLMODE, D3DCULL_NONE );
	g_pDevice->SetRenderState(D3DRS_FILLMODE, D3DFILL_WIREFRAME);


@@item 9. 출력한다.
		D3DXMATRIX Rx, Ry;
		D3DXMatrixRotationX(&Rx, 3.14f / 4.0f) ; // x축으로 45도 회전시킨다.
		static float y = 0;
		D3DXMatrixRotationY(&Ry, y); 
		y += timeDelta / 1000.f; // 각 프례임당 y 회전을 중가시킨다.
		if (y >= 6.28f) // 각도가 2*PI 에 이르면 0으로 초기화한다.
			y = 0;

		Matrix44 rx, ry, r;
		rx.SetRotationX(MATH_PI/4.f);
		ry.SetRotationY(y);
		r = rx * ry;
		g_pDevice->SetTransform(D3DTS_WORLD, (D3DXMATRIX*)&r);

		g_pDevice->SetStreamSource( 0, g_pVB, 0, sizeof(Vertex) );
		g_pDevice->SetIndices(g_pIB);
		g_pDevice->SetFVF( Vertex::FVF );
		g_pDevice->DrawIndexedPrimitive( D3DPT_TRIANGLELIST, 0, 0, 8, 0, 12);



@@item 셰이딩-----------------------------------------------


@@item 1. 버텍스 선언하기.
LPDIRECT3DVERTEXBUFFER9 g_pVB = NULL; // 버텍스 버퍼
LPDIRECT3DINDEXBUFFER9 g_pIB = NULL; // 인덱스 버퍼
int g_VtxSize = 0;
int g_FaceSize = 0;

// 버텍스 구조체
struct Vertex
{
	Vertex() {}
	Vertex(float x0, float y0, float z0, DWORD color0) : 
		p(Vector3(x0, y0, z0)), 
		n(Vector3(0,0,0)), 
		color(color0) {}
	Vector3 p;
	Vector3 n;
	DWORD color;
	static const DWORD FVF;
};
//버텍스 구조체 포맷.
const DWORD Vertex::FVF  = D3DFVF_XYZ | D3DFVF_NORMAL | D3DFVF_DIFFUSE;


@@item 2. 버텍스 버퍼, 인덱스 버퍼 제거하기.
	if (g_pVB)
		g_pVB->Release();
	if (g_pIB)
		g_pIB->Release();


@@item 3. ReadModelFile 함수 구현.
bool ReadModelFile( const string &fileName, LPDIRECT3DVERTEXBUFFER9 &vtxBuff, int &vtxSize,  LPDIRECT3DINDEXBUFFER9 &idxBuff, int &faceSize )
{
	using namespace std;
	ifstream fin(fileName.c_str());
	if (!fin.is_open())
		return false;

	string vtx, vtx_eq;
	int numVertices;
	fin >> vtx >> vtx_eq >> numVertices;

	if (numVertices <= 0)
		return  false;

	vtxSize = numVertices;

	// 버텍스 버퍼 생성.
	if (FAILED(g_pDevice->CreateVertexBuffer( numVertices * sizeof(Vertex),
		D3DUSAGE_WRITEONLY, Vertex::FVF,
		D3DPOOL_MANAGED, &vtxBuff, NULL)))
	{
		return false;
	}

	// 버텍스 버퍼 초기화.
	Vertex* vertices;
	if (FAILED(vtxBuff->Lock( 0, sizeof(Vertex), (void**)&vertices, 0)))
		return false;
	float num1, num2, num3;
	for (int i = 0; i < numVertices; i++)
	{
		fin >> num1 >> num2 >> num3;
		vertices[i] = Vertex(num1, num2, num3, D3DCOLOR_XRGB(255,0,0));
	}
	vtxBuff->Unlock();


	string idx, idx_eq;
	int numIndices;
	fin >> idx >> idx_eq >> numIndices;

	if (numIndices <= 0)
		return false;

	faceSize = numIndices;

	if (FAILED(g_pDevice->CreateIndexBuffer(numIndices*3*sizeof(WORD), 
		D3DUSAGE_WRITEONLY,
		D3DFMT_INDEX16,
		D3DPOOL_MANAGED,
		&idxBuff, NULL)))
	{
		return false;
	}

	WORD *indices = NULL;
	idxBuff->Lock(0, 0, (void**)&indices, 0);
	int num4, num5, num6;
	for (int i = 0; i < numIndices*3; i+=3)
	{
		fin >> num4 >> num5 >> num6;
		indices[ i] = num4;
		indices[ i+1] = num5;
		indices[ i+2] = num6;	
	}
	idxBuff->Unlock();

	ComputeNormals(vtxBuff, vtxSize, idxBuff, faceSize);
	return true;
}


@@item 4. ComputeNormals 함수 구현.
void ComputeNormals(LPDIRECT3DVERTEXBUFFER9 vtxBuff, int vtxSize,  LPDIRECT3DINDEXBUFFER9 idxBuff, int faceSize)
{
	Vertex* vertices;
	vtxBuff->Lock( 0, sizeof(Vertex), (void**)&vertices, 0);
	WORD *indices = NULL;
	idxBuff->Lock(0, 0, (void**)&indices, 0);

	for (int i=0; i < faceSize*3; i+=3)
	{
		Vector3 p1 = vertices[ indices[ i]].p;
		Vector3 p2 = vertices[ indices[ i+1]].p;
		Vector3 p3 = vertices[ indices[ i+2]].p;

		Vector3 v1 = p2 - p1;
		Vector3 v2 = p3 - p1;
		v1.Normalize();
		v2.Normalize();
		Vector3 n = v1.CrossProduct(v2);
		n.Normalize();

		if (vertices[ indices[ i]].n.IsEmpty())
		{
			vertices[ indices[ i]].n = n;
		}
		else
		{
			vertices[ indices[ i]].n += n;
			vertices[ indices[ i]].n /= 2.f;
		}

		if (vertices[ indices[ i+1]].n.IsEmpty())
		{
			vertices[ indices[ i+1]].n = n;
		}
		else
		{
			vertices[ indices[ i+1]].n += n;
			vertices[ indices[ i+1]].n /= 2.f;
		}

		if (vertices[ indices[ i+2]].n.IsEmpty())
		{
			vertices[ indices[ i+2]].n = n;
		}
		else
		{
			vertices[ indices[ i+2]].n += n;
			vertices[ indices[ i+2]].n /= 2.f;
		}
	}

	vtxBuff->Unlock();
	idxBuff->Unlock();
}


@@item 5. 파일 읽어 오기.
	ReadModelFile("vase.dat", g_pVB, g_VtxSize, g_pIB, g_FaceSize);



@@item 6. 출력하기
		static float y = 0;
		y += timeDelta / 1000.f;
		if (y >= 6.28f) // 각도가 2*PI 에 이르면 0으로 초기화한다.
			y = 0;

		Matrix44 rx, ry, r;
		rx.SetRotationX(MATH_PI/4.f); 	// x축으로 45도 회전시킨다.
		ry.SetRotationY(y); // y축으로 회전
		r = rx*ry;
		g_pDevice->SetTransform(D3DTS_WORLD, (D3DXMATRIX*)&r);

		g_pDevice->SetStreamSource( 0, g_pVB, 0, sizeof(Vertex) );
		g_pDevice->SetIndices(g_pIB);
		g_pDevice->SetFVF( Vertex::FVF );
		g_pDevice->DrawIndexedPrimitive( D3DPT_TRIANGLELIST, 0, 0, g_VtxSize, 0, g_FaceSize);



